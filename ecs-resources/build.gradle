
buildscript {
    repositories {
        mavenCentral()
    }
}


ext {
    stackRegion = project.hasProperty('stackRegion') ? project.getProperty('stackRegion'):'us-west-2'
    stackQualifier = project.hasProperty('stackQualifier') ? project.getProperty('stackQualifier'):'develop'
    stackName = project.hasProperty('stackName') ? project.getProperty('stackName'):"${project.parent.name}-${project.stackQualifier}"
    stackInstanceType = project.hasProperty('stackInstanceType') ? project.getProperty('stackInstanceType'):'t2.micro'
}

task platformUp(type: StackUpTask) {
    group 'AWS'
    description "Deploys platform stack '${project.stackName}' environment to AWS"
    stackRegion project.stackRegion
    stackName project.stackName
    template "platform.yaml"
    waitForComplete true
    capabilityIam true
    stackParams['InstanceType'] = project.stackInstanceType
    if(project.hasProperty('stackKeyName')) {
        stackParams['KeyName'] = project.stackKeyName
    } else {
        stackParams['KeyName'] = null
    }
}

task platformDown(type: StackDownTask) {
    group 'AWS'
    description 'Undeploys platform stack ${project.stackName} environment on AWS'
    stackRegion project.stackRegion
    stackName project.stackName
}


task serviceInit {
    // TODO: fetch "EcsElbListenerArn" and"VPCId" from platform stack
    // TODO: Upsert app stack, also passing in "PathPattern" and "RepoName"
}
task serviceDeploy {
    // TODO: fetch "EcsCluster" from platform stack
    // TODO: fetch "EcsElbTargetGroupArn", "RepoUrl" from repo stack

    // TODO: Upsert app stack, also passing in "ServiceDesiredCount", "ImageUrl (RepoUrl + tag)"
}




