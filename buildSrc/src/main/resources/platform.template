{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "InstanceType":{
      "Type":"String",
      "Description":"Instance type to use.",
      "Default": "t2.micro"
    },
    "InstanceTenancy": {
      "Description": "Instance tenancy to use for VPC",
      "Type": "String",
      "AllowedValues": ["default","dedicated"],
      "Default": "default"
    },
    "DesiredCapacity":{
      "Type":"Number",
      "Default":"1",
      "Description":"Number of instances to launch in your ECS cluster"
    },
    "MaxSize":{
      "Type":"Number",
      "Default":"2",
      "Description":"Maximum number of instances that can be launched in your ECS cluster"
    },
    "KeyName":{
      "Type":"String",
      "Description":"KeyName to associate with worker instances.  Leave blank to disable SSH access.",
      "Default": ""
    },
    "SSHAllow": {
      "Description": "Subnet from which to allow SSH access.",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR block: x.x.x.x/x."
    }
  },
  "Conditions": {
    "HasKeyName": {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "KeyName"}]}]}
  },
  "Mappings": {
    "AWSRegionToAMI":{
      "us-east-1":{
        "AMIID":"ami-2b3b6041"
      },
      "us-west-2":{
        "AMIID":"ami-ac6872cd"
      },
      "eu-west-1":{
        "AMIID":"ami-03238b70"
      },
      "ap-northeast-1":{
        "AMIID":"ami-fb2f1295"
      },
      "ap-southeast-2":{
        "AMIID":"ami-43547120"
      },
      "us-west-1":{
        "AMIID":"ami-bfe095df"
      },
      "ap-southeast-1":{
        "AMIID":"ami-c78f43a4"
      },
      "eu-central-1":{
        "AMIID":"ami-e1e6f88d"
      }
    },
    "SubnetConfig": {
      "VPC"     : {
        "CIDR": "10.0.0.0/16"
      },
      "PublicAZ1"  : {
        "CIDR": "10.0.0.0/24"
      },
      "PublicAZ2"  : {
        "CIDR": "10.0.1.0/24"
      },
      "PublicAZ3"  : {
        "CIDR": "10.0.2.0/24"
      }
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "VPC", "CIDR" ]},
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "InstanceTenancy": {"Ref":"InstanceTenancy"}
      }
    },
    "PublicSubnetAZ1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "PublicAZ1", "CIDR" ]},
        "MapPublicIpOnLaunch": true,
        "AvailabilityZone": { "Fn::Select": ["0", { "Fn::GetAZs": "" }] },
        "Tags": [
          { "Key": "Network", "Value": "Public" }
        ]
      }
    },
    "PublicSubnetAZ2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "PublicAZ2", "CIDR" ]},
        "MapPublicIpOnLaunch": true,
        "AvailabilityZone": { "Fn::Select": ["1", { "Fn::GetAZs": "" }] },
        "Tags": [
          { "Key": "Network", "Value": "Public" }
        ]
      }
    },
    "PublicSubnetAZ3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "PublicAZ3", "CIDR" ]},
        "MapPublicIpOnLaunch": true,
        "AvailabilityZone": { "Fn::Select": ["2", { "Fn::GetAZs": "" }] },
        "Tags": [
          { "Key": "Network", "Value": "Public" }
        ]
      }
    },

    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          { "Key": "Network", "Value": "Public" }
        ]
      }
    },

    "VPCInternetGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "InternetGatewayId": { "Ref": "InternetGateway" }
      }
    },

    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "Tags": [
          { "Key": "Network", "Value": "Public" }
        ]
      }
    },

    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "VPCInternetGateway",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "InternetGateway" }
      }
    },

    "PublicSubnetAZ1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnetAZ1" },
        "RouteTableId": { "Ref": "PublicRouteTable" }
      }
    },
    "PublicSubnetAZ2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnetAZ2" },
        "RouteTableId": { "Ref": "PublicRouteTable" }
      }
    },
    "PublicSubnetAZ3RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnetAZ3" },
        "RouteTableId": { "Ref": "PublicRouteTable" }
      }
    },

    "PublicNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "Tags": [
          { "Key": "Network", "Value": "Public" }
        ]
      }
    },

    "InboundEphemeralPortPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "PublicNetworkAcl" },
        "RuleNumber": "103",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": { "From": "1024", "To": "65535" }
      }
    },

    "InboundSSHPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "PublicNetworkAcl" },
        "RuleNumber": "104",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": { "Ref": "SSHAllow" },
        "PortRange": { "From": "22", "To": "22" }
      }
    },

    "InboundHttpPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "PublicNetworkAcl" },
        "RuleNumber": "105",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": { "From": "80", "To": "80" }
      }
    },

    "OutboundPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "PublicNetworkAcl" },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": { "From": "0", "To": "65535" }
      }
    },

    "PublicSubnetAZ1PublicNetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnetAZ1" },
        "NetworkAclId": { "Ref": "PublicNetworkAcl" }
      }
    },
    "PublicSubnetAZ2PublicNetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnetAZ2" },
        "NetworkAclId": { "Ref": "PublicNetworkAcl" }
      }
    },
    "PublicSubnetAZ3PublicNetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnetAZ3" },
        "NetworkAclId": { "Ref": "PublicNetworkAcl" }
      }
    },
    "EcsCluster":{
      "Type":"AWS::ECS::Cluster"
    },
    "ECSAutoScalingGroup":{
      "Type":"AWS::AutoScaling::AutoScalingGroup",
      "DependsOn":[
      ],
      "Properties":{
        "VPCZoneIdentifier": [{"Ref": "PublicSubnetAZ1"},{"Ref": "PublicSubnetAZ2"},{"Ref": "PublicSubnetAZ3"} ],
        "LaunchConfigurationName":{
          "Ref":"ContainerInstances"
        },
        "MinSize":"1",
        "MaxSize":{
          "Ref":"MaxSize"
        },
        "DesiredCapacity":{
          "Ref":"DesiredCapacity"
        }
      },
      "CreationPolicy":{
        "ResourceSignal":{
          "Timeout":"PT15M"
        }
      },
      "UpdatePolicy":{
        "AutoScalingRollingUpdate":{
          "MinInstancesInService":"1",
          "MaxBatchSize":"1",
          "PauseTime":"PT15M",
          "WaitOnResourceSignals":"true"
        }
      }
    },
    "ContainerInstances":{
      "Type":"AWS::AutoScaling::LaunchConfiguration",
      "Metadata":{
        "AWS::CloudFormation::Init":{
          "config":{
            "commands":{
              "01_add_instance_to_cluster":{
                "command":{
                  "Fn::Join":[
                    "",
                    [
                      "#!/bin/bash\n",
                      "echo ECS_CLUSTER=", { "Ref":"EcsCluster" }, " >> /etc/ecs/ecs.config"
                    ]
                  ]
                }
              }
            },
            "files":{
              "/etc/cfn/cfn-hup.conf":{
                "content":{
                  "Fn::Join":[
                    "",
                    [
                      "[main]\n",
                      "stack=", { "Ref":"AWS::StackId" }, "\n",
                      "region=", { "Ref":"AWS::Region" }, "\n"
                    ]
                  ]
                },
                "mode":"000400",
                "owner":"root",
                "group":"root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf":{
                "content":{
                  "Fn::Join":[
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -v ",
                      "         --stack ",
                      {
                        "Ref":"AWS::StackName"
                      },
                      "         --resource ContainerInstances ",
                      "         --region ",
                      {
                        "Ref":"AWS::Region"
                      },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                }
              }
            },
            "services":{
              "sysvinit":{
                "cfn-hup":{
                  "enabled":"true",
                  "ensureRunning":"true",
                  "files":[
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          }
        }
      },
      "Properties":{
        "ImageId":{ "Fn::FindInMap":[ "AWSRegionToAMI", { "Ref":"AWS::Region" }, "AMIID" ] },
        "SecurityGroups":[
          { "Ref":"HostSG" }
        ],
        "InstanceType":{
          "Ref":"InstanceType"
        },
        "IamInstanceProfile":{
          "Ref":"EC2InstanceProfile"
        },
        "KeyName": {"Fn::If": ["HasKeyName", {"Ref": "KeyName"}, {"Ref": "AWS::NoValue"}]},
        "UserData":{
          "Fn::Base64":{
            "Fn::Join":[
              "",
              [
                "#!/bin/bash -xe\n",
                "yum install -y aws-cfn-bootstrap\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ", { "Ref":"AWS::StackName" },
                "         --resource ContainerInstances ",
                "         --region ", { "Ref":"AWS::Region" }, "\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ", { "Ref":"AWS::StackName" },
                "         --resource ECSAutoScalingGroup ",
                "         --region ", { "Ref":"AWS::Region" },
                "\n"
              ]
            ]
          }
        }
      }
    },
    "EC2InstanceProfile":{
      "Type":"AWS::IAM::InstanceProfile",
      "Properties":{
        "Path":"/",
        "Roles":[
          {
            "Ref":"EC2Role"
          }
        ]
      }
    },
    "EC2Role":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "ec2.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/",
        "Policies":[
          {
            "PolicyName":"ecs-service",
            "PolicyDocument":{
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":[
                    "ecs:CreateCluster",
                    "ecs:RegisterContainerInstance",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Submit*",
                    "ecr:*",
                    "ecs:Poll"
                  ],
                  "Resource":"*"
                }
              ]
            }
          }
        ]
      }
    },

    "HostSG":{
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "VpcId":{ "Ref":"VPC" },
        "GroupDescription":"ECS Host Security Group",
        "SecurityGroupIngress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"22",
            "ToPort":"22",
            "CidrIp":{"Ref":"SSHAllow"}
          }
        ]
      }
    },
    "ElbSG":{
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "VpcId":{ "Ref":"VPC" },
        "GroupDescription":"ELB Security Group",
        "SecurityGroupIngress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"80",
            "ToPort":"80",
            "CidrIp":"0.0.0.0/0"
          }
        ]
      }
    },
    "ELB2HostRule":{
      "Type":"AWS::EC2::SecurityGroupIngress",
      "Properties":{
        "IpProtocol":"tcp",
        "FromPort":"0",
        "ToPort":"65535",
        "SourceSecurityGroupId":{
          "Fn::GetAtt":[ "ElbSG", "GroupId"]
        },
        "GroupId":{
          "Fn::GetAtt":[ "HostSG", "GroupId" ]
        }
      }
    },
    "Host2ELBRule":{
      "Type":"AWS::EC2::SecurityGroupIngress",
      "Properties":{
        "IpProtocol":"tcp",
        "FromPort":"0",
        "ToPort":"65535",
        "SourceSecurityGroupId":{
          "Fn::GetAtt":[ "HostSG", "GroupId" ]
        },
        "GroupId":{
          "Fn::GetAtt":[ "ElbSG", "GroupId" ]
        }
      }
    },
    "EcsElb":{
      "Type":"AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties":{
        "Subnets": [{"Ref": "PublicSubnetAZ1"},{"Ref": "PublicSubnetAZ2"},{"Ref": "PublicSubnetAZ3"} ],
        "SecurityGroups":[
          {
            "Ref":"ElbSG"
          }
        ]
      }
    },
    "EcsElbListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "LoadBalancerArn": {
          "Ref": "EcsElb"
        },
        "DefaultActions": [{
          "Type": "forward",
          "TargetGroupArn": { "Ref": "EcsElbDefaultTargetGroup" }
        }],
        "Port": "80",
        "Protocol": "HTTP"
      }
    },
    "EcsElbDefaultTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Port": "8080",
        "Protocol": "HTTP",
        "VpcId": {"Ref": "VPC"}
      }
    }
  },
  "Outputs":{
    "BaseUrl":{
      "Value":{
        "Fn::Join":[ "", [ "http://", { "Fn::GetAtt":[ "EcsElb", "DNSName" ] }, "/" ] ]
      },
      "Description":"ELB URL"
    },
    "EcsElbListenerArn":{
      "Value": {"Ref":"EcsElbListener"},
      "Description": "Arn of the ELB Listener."
    },
    "EcsCluster":{
      "Value": {"Ref":"EcsCluster"},
      "Description": "Name of the ECS cluster."
    },
    "VPCId" : {
      "Value": { "Ref": "VPC" },
      "Description" : "The id of the vpc"
    }
  }
}