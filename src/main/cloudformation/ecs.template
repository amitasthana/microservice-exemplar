{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "RepoName":{
      "Type":"String",
      "Description":"Repo name",
      "Default": "microservice-exemplar"
    },
    "KeyName":{
      "Type":"String",
      "Description":"KeyName to associate with instances.  Leave blank to disable SSH access."
    },
    "InstanceType":{
      "Type":"String",
      "Description":"Instance type to use.",
      "Default": "c4.large"
    },
    "VPCId":{
      "Type":"String",
      "Description":"VPC to launch workers into"
    },
    "Subnets":{
      "Type":"CommaDelimitedList",
      "Description":"Subnets to launch into"
    },
    "ServiceDesiredCount":{
      "Type":"Number",
      "Default":"0",
      "Description":"Number of containers to launch in your ECS service."
    },
    "TaskImageTag":{
      "Type":"String",
      "Default":"latest",
      "Description":"Tag to use for task definition."
    },
    "DesiredCapacity":{
      "Type":"Number",
      "Default":"1",
      "Description":"Number of instances to launch in your ECS cluster"
    },
    "MaxSize":{
      "Type":"Number",
      "Default":"2",
      "Description":"Maximum number of instances that can be launched in your ECS cluster"
    },
    "SSHAllow": {
      "Description": "Subnet from which to allow SSH access.",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR block: x.x.x.x/x."
    }
  },
  "Conditions": {
    "HasKeyName": {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "KeyName"}]}]}
  },
  "Mappings": {
    "AWSRegionToAMI":{
      "us-east-1":{
        "AMIID":"ami-2b3b6041"
      },
      "us-west-2":{
        "AMIID":"ami-ac6872cd"
      },
      "eu-west-1":{
        "AMIID":"ami-03238b70"
      },
      "ap-northeast-1":{
        "AMIID":"ami-fb2f1295"
      },
      "ap-southeast-2":{
        "AMIID":"ami-43547120"
      },
      "us-west-1":{
        "AMIID":"ami-bfe095df"
      },
      "ap-southeast-1":{
        "AMIID":"ami-c78f43a4"
      },
      "eu-central-1":{
        "AMIID":"ami-e1e6f88d"
      }
    }
  },
  "Resources": {
    "EcsRepo": {
      "Type" : "AWS::ECR::Repository",
      "Properties" : {
        "RepositoryName" : {"Ref":"RepoName"},
        "RepositoryPolicyText" : {
          "Version": "2008-10-17",
          "Statement": [
            {
              "Sid": "AllowPushPull",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Condition": {
                "ArnLike": {
                  "aws:SourceArn": {"Fn::Join":[":",["arn:aws:iam:",{"Ref":"AWS::AccountId"},"user/*"]]}
                }
              },
              "Action": [
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
                "ecr:BatchCheckLayerAvailability",
                "ecr:PutImage",
                "ecr:InitiateLayerUpload",
                "ecr:UploadLayerPart",
                "ecr:CompleteLayerUpload"
              ]
            }
          ]
        }
      }
    },
    "EcsCluster":{
      "Type":"AWS::ECS::Cluster"
    },
    "EcsService":{
      "Type":"AWS::ECS::Service",
      "DependsOn":[
        "ECSAutoScalingGroup"
      ],
      "Properties":{
        "Cluster":{
          "Ref":"EcsCluster"
        },
        "DesiredCount":{"Ref": "ServiceDesiredCount"},
        "DeploymentConfiguration":{
          "MaximumPercent":100,
          "MinimumHealthyPercent":0
        },
        "LoadBalancers":[
          {
            "ContainerName":"microservice-exemplar-container",
            "ContainerPort":"8080",
            "TargetGroupArn":{
              "Ref":"EcsElbTargetGroup"
            }
          }
        ],
        "Role":{
          "Ref":"EcsServiceRole"
        },
        "TaskDefinition":{
          "Ref":"MicroserviceTaskDefinition"
        }
      }
    },
    "MicroserviceTaskDefinition":{
      "Type":"AWS::ECS::TaskDefinition",
      "Properties":{
        "ContainerDefinitions":[
          {
            "Name":"microservice-exemplar-container",
            "Cpu":"10",
            "Essential":"true",
            "Image":
            {
              "Fn::Join":[
                "",
                [
                  { "Ref":"AWS::AccountId" },
                  ".dkr.ecr.",
                  { "Ref":"AWS::Region" },
                  ".amazonaws.com/",
                  { "Ref":"RepoName" },
                  ":",
                  { "Ref":"TaskImageTag" }
                ]
              ]
            },
            "Memory":"300",
            "PortMappings":[
              {
                "HostPort":0,
                "ContainerPort":8080
              }
            ]
          }
        ],
        "Volumes":[]
      }
    },
    "ECSAutoScalingGroup":{
      "Type":"AWS::AutoScaling::AutoScalingGroup",
      "DependsOn":[
      ],
      "Properties":{
        "VPCZoneIdentifier":{"Ref": "Subnets"},
        "LaunchConfigurationName":{
          "Ref":"ContainerInstances"
        },
        "MinSize":"1",
        "MaxSize":{
          "Ref":"MaxSize"
        },
        "DesiredCapacity":{
          "Ref":"DesiredCapacity"
        }
      },
      "CreationPolicy":{
        "ResourceSignal":{
          "Timeout":"PT15M"
        }
      },
      "UpdatePolicy":{
        "AutoScalingRollingUpdate":{
          "MinInstancesInService":"1",
          "MaxBatchSize":"1",
          "PauseTime":"PT15M",
          "WaitOnResourceSignals":"true"
        }
      }
    },
    "ContainerInstances":{
      "Type":"AWS::AutoScaling::LaunchConfiguration",
      "Metadata":{
        "AWS::CloudFormation::Init":{
          "config":{
            "commands":{
              "01_add_instance_to_cluster":{
                "command":{
                  "Fn::Join":[
                    "",
                    [
                      "#!/bin/bash\n",
                      "echo ECS_CLUSTER=", { "Ref":"EcsCluster" }, " >> /etc/ecs/ecs.config"
                    ]
                  ]
                }
              }
            },
            "files":{
              "/etc/cfn/cfn-hup.conf":{
                "content":{
                  "Fn::Join":[
                    "",
                    [
                      "[main]\n",
                      "stack=", { "Ref":"AWS::StackId" }, "\n",
                      "region=", { "Ref":"AWS::Region" }, "\n"
                    ]
                  ]
                },
                "mode":"000400",
                "owner":"root",
                "group":"root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf":{
                "content":{
                  "Fn::Join":[
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -v ",
                      "         --stack ",
                      {
                        "Ref":"AWS::StackName"
                      },
                      "         --resource ContainerInstances ",
                      "         --region ",
                      {
                        "Ref":"AWS::Region"
                      },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                }
              }
            },
            "services":{
              "sysvinit":{
                "cfn-hup":{
                  "enabled":"true",
                  "ensureRunning":"true",
                  "files":[
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          }
        }
      },
      "Properties":{
        "ImageId":{ "Fn::FindInMap":[ "AWSRegionToAMI", { "Ref":"AWS::Region" }, "AMIID" ] },
        "SecurityGroups":[
          { "Ref":"HostSG" }
        ],
        "InstanceType":{
          "Ref":"InstanceType"
        },
        "IamInstanceProfile":{
          "Ref":"EC2InstanceProfile"
        },
        "KeyName": {"Fn::If": ["HasKeyName", {"Ref": "KeyName"}, {"Ref": "AWS::NoValue"}]},
        "UserData":{
          "Fn::Base64":{
            "Fn::Join":[
              "",
              [
                "#!/bin/bash -xe\n",
                "yum install -y aws-cfn-bootstrap\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ", { "Ref":"AWS::StackName" },
                "         --resource ContainerInstances ",
                "         --region ", { "Ref":"AWS::Region" }, "\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ", { "Ref":"AWS::StackName" },
                "         --resource ECSAutoScalingGroup ",
                "         --region ", { "Ref":"AWS::Region" },
                "\n"
              ]
            ]
          }
        }
      }
    },
    "EC2InstanceProfile":{
      "Type":"AWS::IAM::InstanceProfile",
      "Properties":{
        "Path":"/",
        "Roles":[
          {
            "Ref":"EC2Role"
          }
        ]
      }
    },
    "EC2Role":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "ec2.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/",
        "Policies":[
          {
            "PolicyName":"ecs-service",
            "PolicyDocument":{
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":[
                    "ecs:CreateCluster",
                    "ecs:RegisterContainerInstance",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Submit*",
                    "ecr:*",
                    "ecs:Poll"
                  ],
                  "Resource":"*"
                }
              ]
            }
          }
        ]
      }
    },
    "EcsServiceRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "ecs.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/",
        "Policies":[
          {
            "PolicyName":"ecs-service",
            "PolicyDocument":{
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":[
                    "ec2:AuthorizeSecurityGroupIngress",
                    "ec2:Describe*",
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "elasticloadbalancing:DeregisterTargets",
                    "elasticloadbalancing:DescribeTargetGroups",
                    "elasticloadbalancing:DescribeTargetHealth",
                    "elasticloadbalancing:RegisterTargets"
                  ],
                  "Resource":"*"
                }
              ]
            }
          }
        ]
      }
    },

    "HostSG":{
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "VpcId":{ "Ref":"VPCId" },
        "GroupDescription":"ECS Host Security Group",
        "SecurityGroupIngress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"22",
            "ToPort":"22",
            "CidrIp":{"Ref":"SSHAllow"}
          }
        ]
      }
    },
    "ElbSG":{
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "VpcId":{ "Ref":"VPCId" },
        "GroupDescription":"ELB Security Group",
        "SecurityGroupIngress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"80",
            "ToPort":"80",
            "CidrIp":"0.0.0.0/0"
          }
        ]
      }
    },
    "ELB2HostRule":{
      "Type":"AWS::EC2::SecurityGroupIngress",
      "Properties":{
        "IpProtocol":"tcp",
        "FromPort":"0",
        "ToPort":"65535",
        "SourceSecurityGroupId":{
          "Fn::GetAtt":[ "ElbSG", "GroupId"]
        },
        "GroupId":{
          "Fn::GetAtt":[ "HostSG", "GroupId" ]
        }
      }
    },
    "Host2ELBRule":{
      "Type":"AWS::EC2::SecurityGroupIngress",
      "Properties":{
        "IpProtocol":"tcp",
        "FromPort":"0",
        "ToPort":"65535",
        "SourceSecurityGroupId":{
          "Fn::GetAtt":[ "HostSG", "GroupId" ]
        },
        "GroupId":{
          "Fn::GetAtt":[ "ElbSG", "GroupId" ]
        }
      }
    },
    "EcsElb":{
      "Type":"AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties":{
        "Subnets":{"Ref": "Subnets"},
        "SecurityGroups":[
          {
            "Ref":"ElbSG"
          }
        ]
      }
    },
    "EcsElbListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [{
          "Type": "forward",
          "TargetGroupArn": {
            "Ref": "EcsElbTargetGroup"
          }
        }],
        "LoadBalancerArn": {
          "Ref": "EcsElb"
        },
        "Port": "80",
        "Protocol": "HTTP"
      }
    },
    "EcsElbListenerRule": {
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
      "Properties": {
        "Actions": [{
          "Type": "forward",
          "TargetGroupArn": {
            "Ref": "EcsElbTargetGroup"
          }
        }],
        "Conditions": [{
          "Field": "path-pattern",
          "Values": ["*"]
        }],
        "ListenerArn": {
          "Ref": "EcsElbListener"
        },
        "Priority": 1
      }
    },
    "EcsElbTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 5,
        "HealthCheckPath": "/health",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 3,
        "HealthyThresholdCount": 2,
        "Matcher": {
          "HttpCode": "200-299"
        },
        "Port": "8080",
        "Protocol": "HTTP",
        "TargetGroupAttributes": [{
          "Key": "deregistration_delay.timeout_seconds",
          "Value": 60
        }],
        "UnhealthyThresholdCount": 5,
        "VpcId": {"Ref": "VPCId"}
      }
    }
  },
  "Outputs":{
    "RepoUrl" : {
      "Description" : "Url of the repo",
      "Value" : {"Fn::Join": ["",[{"Ref":"AWS::AccountId"}, ".dkr.ecr.", {"Ref":"AWS::Region"}, ".amazonaws.com/", {"Ref":"RepoName"}]]}
    },
    "AppUrl":{
      "Value":{
        "Fn::Join":[ "", [ "http://", { "Fn::GetAtt":[ "EcsElb", "DNSName" ] }, "/" ] ]
      },
      "Description":"URL to the working application running on ECS"
    }
  }
}
